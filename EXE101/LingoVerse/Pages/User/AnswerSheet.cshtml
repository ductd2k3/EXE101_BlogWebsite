@model FlashCardTestModel

<div class="container-sm overflow-hidden shadow bg-white" style="border-radius: 10px; border: 1px #cccccc solid;">
    <div class="row p-3 flex-column bg-info text-light" style="font-size: small; border-bottom: #cccccc 1px solid;">
        <div>Time remaining</div>
        <div class="time-remaining" id="countdown">@Model.TimeInMinutes minutes 0 seconds</div>
    </div>
    <div class="mt-3 ml-3 mb-3">
        <div class="row question-detail justify-content-center">
            Question 1 (@((10.0 / Model.FinalListTest.Count).ToString("0.00")) points)
        </div>
        <div class="row justify-content-center" style="font-weight: 400">
            Click number to navigate to that question.
        </div>
    </div>

    <div class="row d-flex justify-content-center" style="font-size: 15px; margin-bottom: 20px">
            Answer sheet
    </div>
    <div class="row d-flex justify-content-center" style="padding: 0 15px 0 15px!important">
        @for (int i = 0; i < Model.FinalListTest.Count; i++)
        {
            <div class="col-2 d-flex justify-content-center" style="padding: 0 5px 0 5px!important">
                <div id="@(i+1)" class="d-flex justify-content-center align-items-center numberSheet"
                     style="border-radius: 5px; border: 1px #cccccc solid; height: 38px; width: 38px; margin-bottom: 10px;">
                    <span>@(i + 1)</span>
                </div>
            </div>
        }
    </div>
    <div class="row justify-content-center">
        <button type="button" onclick="submitData()" class="btn btn-info mb-3" style="width:fit-content; color:white">Submit</button>
    </div>
</div>

    <style>
        body {
            font-family: "Montserrat", sans-serif;
            font-style: normal;
            font-weight: 600;
        }

        .numberSheet {
            cursor: pointer;
        }

        .bgAndText-selected {
            background-color: #17a2b8 !important;
            color: white;
        }
    </style>


    <script>
            // Set the date we're counting down to
    var countDownDate = new Date().getTime() + @Model.TimeInMinutes * 60 * 1000;
    var totalTime = @Model.TimeInMinutes * 60 * 1000; // Tổng thời gian tính bằng mili giây

    // Update the count down every 1 second
    var x = setInterval(function() {
        // Get today's date and time
        var now = new Date().getTime();

        // Find the distance between now and the count down date
        var distance = countDownDate - now;

        // Time calculations for minutes and seconds
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Display the result in the element with id="countdown"
        document.getElementById("countdown").innerHTML = minutes + " minutes " + seconds + " seconds ";

        // Cập nhật progress-bar dựa trên thời gian đã trôi qua
        var timeElapsed = totalTime - distance;
        var progressPercentage = (timeElapsed / totalTime) * 100;

        // Đảm bảo progress-bar không vượt quá 100%
        progressPercentage = Math.min(progressPercentage, 100);

        // Cập nhật progress-bar
        const progressBar = document.querySelector('.progress-bar-learn');
        progressBar.style.width = progressPercentage + '%';
        progressBar.setAttribute('aria-valuenow', Math.floor(progressPercentage * @Model.Total / 100));

        // If the count down is finished, write some text
        if (distance < 0) {
            clearInterval(x);
            document.getElementById("countdown").innerHTML = "EXPIRED";

            // Đảm bảo progress-bar đầy khi hết thời gian
            progressBar.style.width = '100%';
            progressBar.setAttribute('aria-valuenow', @Model.Total);

            submitData(); // Auto-submit when time expires
        }
    }, 1000);
    </script>